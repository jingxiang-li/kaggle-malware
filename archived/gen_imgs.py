import re
from os import listdir, path
import numpy as np
# import pickle
# import pylab
from math import sqrt, log
from skimage.transform import resize
from skimage.io import imsave


wd = '/media/s_ariel/HDD_1T/Kaggle/data/train'
save_dir = '/home/s_ariel/Documents/imgs'
files = listdir(wd)
regex_asm = re.compile('.*\.bytes')
asm_files = [f for f in files if regex_asm.match(f) is not None]
asm_files.sort()


def get_img(asm_name):
    byte_list = []
    with open(path.join(wd, asm_name), 'r', encoding='latin-1') as f_in:
        for line in f_in:
            byte_list += line.split()[1:]

    byte_int = [int(xx, 16) if xx != '??' else 0 for xx in byte_list]

    # determine the width of this image, most likely to be a square
    # let a be the num_rows, b be the num_cols
    n = len(byte_int)
    b = 2 ** round(log(int(sqrt(n)), 2))

    # pad with 00
    byte_int += [0] * (b - len(byte_int) % b)

    # get the 2-d image
    a = int(len(byte_int) / b)
    img = np.array(byte_int).reshape((a, b))

    # resize to 256 * 256
    img = resize(img, (256, 256), preserve_range=True)
    img = np.uint8(img)

    # save it as png
    img_name = asm_name[:-6] + '.jpg'
    imsave(path.join(save_dir, img_name), img)
    # pylab.imshow(img, cmap='gray')
    # pylab.show()


for asm_file in asm_files:
    print(asm_file)
    img_name = asm_file[:-6] + '.jpg'
    if path.isfile(path.join(save_dir, img_name)):
        continue
    get_img(asm_file)
